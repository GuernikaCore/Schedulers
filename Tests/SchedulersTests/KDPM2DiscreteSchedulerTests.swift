//
//  KDPM2DiscreteSchedulerTests.swift
//  
//
//  Created by Guillermo Cique Fern√°ndez on 30/11/23.
//

import XCTest
import CoreML
import RandomGenerator
@testable import Schedulers

final class KDPM2DiscreteSchedulerTests: XCTestCase {
    func test1StepsLinspace() throws {
        var scheduler = KDPM2DiscreteScheduler(stepCount: 1)
        XCTAssertEqual(scheduler.timeSteps, [0])
        scheduler = KDPM2DiscreteScheduler(strength: 0.9, stepCount: 1)
        XCTAssertEqual(scheduler.timeSteps, [0])
    }
    
    func test2StepsLinspace() throws {
        let scheduler = KDPM2DiscreteScheduler(stepCount: 2)
        zip(scheduler.timeSteps, [999.00000000, 233.20971680,   0]).forEach { actual, expected in
            XCTAssertEqual(actual, expected, accuracy: 0.02)
        }
    }
    
    func test33StepsLinspace() throws {
        let scheduler = KDPM2DiscreteScheduler(stepCount: 33, timestepSpacing: .linspace)
        print(scheduler.sigmas)
        print(scheduler.sigmasInterpol)
        zip(scheduler.timeSteps, [
            999.0000, 983.5647, 967.7812, 952.3476, 936.5625, 921.1296, 905.3438, 889.9105, 874.1250, 858.6903, 842.9062,
            827.4695, 811.6875, 796.2476, 780.4688, 765.0242, 749.2500, 733.7988, 718.0312, 702.5723, 686.8125, 671.3444,
            655.5938, 640.1148, 624.3750, 608.8832, 593.1562, 577.6496, 561.9375, 546.4146, 530.7188, 515.1776, 499.5000,
            483.9385, 468.2812, 452.6969, 437.0625, 421.4530, 405.8438, 390.2062, 374.6250, 358.9561, 343.4062, 327.7014,
            312.1875, 296.4409, 280.9688, 265.1727, 249.7500, 233.8935, 218.5312, 202.5977, 187.3125, 171.2754, 156.0938,
            139.9077, 124.8750, 108.4546,  93.6562,  76.8053,  62.4375,  44.5434,  31.2188,   4.8832,   0.000
        ]).forEach { actual, expected in
            XCTAssertEqual(actual, expected, accuracy: 0.02)
        }
    }
    
    func test33StepsLeading() throws {
        let scheduler = KDPM2DiscreteScheduler(stepCount: 33, timestepSpacing: .leading)
        zip(scheduler.timeSteps, [
            960.0000, 945.1619, 930.0000, 915.1622, 900.0000, 885.1620, 870.0000, 855.1609, 840.0000, 825.1589, 810.0000,
            795.1558, 780.0000, 765.1516, 750.0000, 735.1461, 720.0000, 705.1393, 690.0000, 675.1312, 660.0000, 645.1217,
            630.0000, 615.1107, 600.0000, 585.0980, 570.0000, 555.0840, 540.0000, 525.0682, 510.0000, 495.0507, 480.0000,
            465.0315, 450.0000, 435.0101, 420.0000, 404.9864, 390.0000, 374.9601, 360.0000, 344.9304, 330.0000, 314.8965,
            300.0000, 284.8571, 270.0000, 254.8103, 240.0000, 224.7528, 210.0000, 194.6792, 180.0000, 164.5800, 150.0000,
            134.4374, 120.0000, 104.2114,  90.0000,  73.7981,  60.0000,  42.7957,  30.0000,   4.7689,   0.0000
        ]).forEach { actual, expected in
            XCTAssertEqual(actual, expected, accuracy: 0.02)
        }
    }
    
    func test33StepsTrailing() throws {
        let scheduler = KDPM2DiscreteScheduler(stepCount: 33, timestepSpacing: .trailing)
        zip(scheduler.timeSteps, [
            999.0000, 984.1605, 969.0000, 953.6725, 938.0000, 923.1622, 908.0000, 893.1621, 878.0000, 862.6721, 847.0000,
            832.1594, 817.0000, 802.1566, 787.0000, 772.1526, 757.0000, 741.6573, 726.0000, 711.1408, 696.0000, 681.1329,
            666.0000, 650.6318, 635.0000, 620.1125, 605.0000, 590.1003, 575.0000, 559.5920, 544.0000, 529.0704, 514.0000,
            499.0532, 484.0000, 469.0341, 454.0000, 438.5135, 423.0000, 407.9889, 393.0000, 377.9628, 363.0000, 347.4285,
            332.0000, 316.8989, 302.0000, 286.8600, 272.0000, 256.3002, 241.0000, 225.7549, 211.0000, 195.6820, 181.0000,
            165.5839, 151.0000, 134.9017, 120.0000, 104.2114,  90.0000,  73.7981,  60.0000,  42.1086,  29.0000
        ]).forEach { actual, expected in
            XCTAssertEqual(actual, expected, accuracy: 0.02)
        }
    }
    
    func test33StepsKarras() throws {
        let scheduler = KDPM2DiscreteScheduler(stepCount: 33, useKarrasSigmas: true)
        print(scheduler.timeSteps)
        print(scheduler.sigmas)
        print(scheduler.sigmasInterpol)
    }
    
    func test50StepsLinspace() throws {
        var scheduler = KDPM2DiscreteScheduler(stepCount: 50, timestepSpacing: .linspace)
        zip(scheduler.timeSteps, [
            999.0000, 988.8805, 978.6122, 968.4934, 958.2245, 948.1058, 937.8367, 927.7183, 917.4490, 907.3304, 897.0612,
            886.9426, 876.6735, 866.5547, 856.2857, 846.1663, 835.8979, 825.7779, 815.5102, 805.3893, 795.1224, 785.0004,
            774.7347, 764.6113, 754.3469, 744.2217, 733.9592, 723.8320, 713.5714, 703.4421, 693.1837, 683.0518, 672.7959,
            662.6613, 652.4081, 642.2703, 632.0204, 621.8791, 611.6326, 601.4877, 591.2449, 581.0958, 570.8571, 560.7037,
            550.4694, 540.3111, 530.0816, 519.9182, 509.6939, 499.5251, 489.3061, 479.1313, 468.9184, 458.7373, 448.5306,
            438.3429, 428.1429, 417.9479, 407.7551, 397.5524, 387.3673, 377.1562, 366.9796, 356.7594, 346.5918, 336.3619,
            326.2041, 315.9632, 305.8163, 295.5637, 285.4286, 275.1624, 265.0408, 254.7595, 244.6531, 234.3545, 224.2653,
            213.9462, 203.8775, 193.5343, 183.4898, 173.1166, 163.1020, 152.6915, 142.7143, 132.2547, 122.3265, 111.7999,
            101.9388,  91.3149,  81.5510,  70.7725,  61.1633,  50.1022,  40.7755,  29.0375,  20.3878,   3.7423,   0.0000
        ]).forEach { actual, expected in
            XCTAssertEqual(actual, expected, accuracy: 0.02)
        }
        scheduler = KDPM2DiscreteScheduler(strength: 0.7, stepCount: 50, timestepSpacing: .linspace)
        zip(scheduler.timeSteps, [
            693.1837, 683.0518, 672.7959, 662.6613, 652.4081, 642.2703, 632.0204, 621.8791, 611.6326, 601.4877, 591.2449,
            581.0958, 570.8571, 560.7037, 550.4694, 540.3111, 530.0816, 519.9182, 509.6939, 499.5251, 489.3061, 479.1313,
            468.9184, 458.7373, 448.5306, 438.3429, 428.1429, 417.9479, 407.7551, 397.5524, 387.3673, 377.1562, 366.9796,
            356.7594, 346.5918, 336.3619, 326.2041, 315.9632, 305.8163, 295.5637, 285.4286, 275.1624, 265.0408, 254.7595,
            244.6531, 234.3545, 224.2653, 213.9462, 203.8775, 193.5343, 183.4898, 173.1166, 163.1020, 152.6915, 142.7143,
            132.2547, 122.3265, 111.7999, 101.9388,  91.3149,  81.5510,  70.7725,  61.1633,  50.1022,  40.7755,  29.0375,
            20.3878,   3.7423,   0.0000
        ]).forEach { actual, expected in
            XCTAssertEqual(actual, expected, accuracy: 0.02)
        }
    }
    
    func test50StepsLeading() throws {
        var scheduler = KDPM2DiscreteScheduler(stepCount: 50, timestepSpacing: .leading)
        zip(scheduler.timeSteps, [
            980.0000, 970.0717, 960.0000, 950.0718, 940.0000, 930.0720, 920.0000, 910.0722, 900.0000, 890.0720, 880.0000,
            870.0718, 860.0000, 850.0714, 840.0000, 830.0708, 820.0000, 810.0700, 800.0000, 790.0690, 780.0000, 770.0677,
            760.0000, 750.0662, 740.0000, 730.0645, 720.0000, 710.0624, 700.0000, 690.0602, 680.0000, 670.0576, 660.0000,
            650.0549, 640.0000, 630.0517, 620.0000, 610.0483, 600.0000, 590.0446, 580.0000, 570.0405, 560.0000, 550.0362,
            540.0000, 530.0316, 520.0000, 510.0266, 500.0000, 490.0212, 480.0000, 470.0154, 460.0000, 450.0094, 440.0000,
            430.0028, 420.0000, 409.9958, 400.0000, 389.9883, 380.0000, 369.9802, 360.0000, 349.9714, 340.0000, 329.9619,
            320.0000, 309.9514, 300.0000, 289.9397, 280.0000, 269.9267, 260.0000, 249.9119, 240.0000, 229.8950, 220.0000,
            209.8751, 200.0000, 189.8513, 180.0000, 169.8222, 160.0000, 149.7855, 140.0000, 129.7375, 120.0000, 109.6718,
            100.0000,  89.5766,  80.0000,  69.4252,  60.0000,  49.1481,  40.0000,  28.4888,  20.0000,   3.6994,   0.0000
        ]).forEach { actual, expected in
            XCTAssertEqual(actual, expected, accuracy: 0.02)
        }
        scheduler = KDPM2DiscreteScheduler(strength: 0.7, stepCount: 50, timestepSpacing: .leading)
        zip(scheduler.timeSteps, [
            680.0000, 670.0576, 660.0000, 650.0549, 640.0000, 630.0517, 620.0000, 610.0483, 600.0000, 590.0446, 580.0000,
            570.0405, 560.0000, 550.0362, 540.0000, 530.0316, 520.0000, 510.0266, 500.0000, 490.0212, 480.0000, 470.0154,
            460.0000, 450.0094, 440.0000, 430.0028, 420.0000, 409.9958, 400.0000, 389.9883, 380.0000, 369.9802, 360.0000,
            349.9714, 340.0000, 329.9619, 320.0000, 309.9514, 300.0000, 289.9397, 280.0000, 269.9267, 260.0000, 249.9119,
            240.0000, 229.8950, 220.0000, 209.8751, 200.0000, 189.8513, 180.0000, 169.8222, 160.0000, 149.7855, 140.0000,
            129.7375, 120.0000, 109.6718, 100.0000,  89.5766,  80.0000,  69.4252,  60.0000,  49.1481,  40.0000,  28.4888,
            20.0000,   3.6994,   0.0000
        ]).forEach { actual, expected in
            XCTAssertEqual(actual, expected, accuracy: 0.02)
        }
    }
    
    func test50StepsTrailing() throws {
        var scheduler = KDPM2DiscreteScheduler(stepCount: 50, timestepSpacing: .trailing)
        zip(scheduler.timeSteps, [
            999.0000, 989.0712, 979.0000, 969.0715, 959.0000, 949.0720, 939.0000, 929.0721, 919.0000, 909.0721, 899.0000,
            889.0720, 879.0000, 869.0718, 859.0000, 849.0714, 839.0000, 829.0707, 819.0000, 809.0699, 799.0000, 789.0689,
            779.0000, 769.0676, 759.0000, 749.0662, 739.0000, 729.0643, 719.0000, 709.0624, 699.0000, 689.0601, 679.0000,
            669.0575, 659.0000, 649.0547, 639.0000, 629.0516, 619.0000, 609.0482, 599.0000, 589.0444, 579.0000, 569.0404,
            559.0000, 549.0360, 539.0000, 529.0312, 519.0000, 509.0263, 499.0000, 489.0209, 479.0000, 469.0152, 459.0000,
            449.0091, 439.0000, 429.0025, 419.0000, 408.9954, 399.0000, 388.9879, 379.0000, 368.9798, 359.0000, 348.9710,
            339.0000, 328.9614, 319.0000, 308.9508, 299.0000, 288.9391, 279.0000, 268.9260, 259.0000, 248.9111, 239.0000,
            228.8940, 219.0000, 208.8740, 199.0000, 188.8500, 179.0000, 168.8205, 159.0000, 148.7834, 139.0000, 128.7347,
            119.0000, 108.6679,  99.0000,  88.5706,  79.0000,  68.4152,  59.0000,  48.1281,  39.0000,  27.4306,  19.0000
        ]).forEach { actual, expected in
            XCTAssertEqual(actual, expected, accuracy: 0.02)
        }
        scheduler = KDPM2DiscreteScheduler(strength: 0.7, stepCount: 50, timestepSpacing: .trailing)
        zip(scheduler.timeSteps, [
            699.0000, 689.0601, 679.0000, 669.0575, 659.0000, 649.0547, 639.0000, 629.0516, 619.0000, 609.0482, 599.0000,
            589.0444, 579.0000, 569.0404, 559.0000, 549.0360, 539.0000, 529.0312, 519.0000, 509.0263, 499.0000, 489.0209,
            479.0000, 469.0152, 459.0000, 449.0091, 439.0000, 429.0025, 419.0000, 408.9954, 399.0000, 388.9879, 379.0000,
            368.9798, 359.0000, 348.9710, 339.0000, 328.9614, 319.0000, 308.9508, 299.0000, 288.9391, 279.0000, 268.9260,
            259.0000, 248.9111, 239.0000, 228.8940, 219.0000, 208.8740, 199.0000, 188.8500, 179.0000, 168.8205, 159.0000,
            148.7834, 139.0000, 128.7347, 119.0000, 108.6679,  99.0000,  88.5706,  79.0000,  68.4152,  59.0000,  48.1281,
            39.0000,  27.4306,  19.0000
        ]).forEach { actual, expected in
            XCTAssertEqual(actual, expected, accuracy: 0.02)
        }
    }
    
    func test50StepsKarras() throws {
        let scheduler = KDPM2DiscreteScheduler(stepCount: 50, useKarrasSigmas: true)
        print(scheduler.timeSteps)
        print(scheduler.sigmas)
        print(scheduler.sigmasInterpol)
    }
    
    func testStepEpsilon() throws {
        let scheduler = KDPM2DiscreteScheduler(stepCount: 20)
        let generator: RandomGenerator = TorchRandomGenerator(seed: 50)
        let stdev = scheduler.initNoiseSigma
        var latent: MLShapedArray<Float32> = generator.nextArray(shape: [1, 4, 64, 64], mean: 0, stdev: stdev)
        zip(latent[0][0][0][0..<10].scalars, [
            -16.9352,   5.3684,  10.3907,  -3.4685, -14.8032,   8.1545, -12.8368, -16.7278, -11.1495,  -1.2574
        ]).forEach { actual, expected in
            XCTAssertEqual(actual, expected, accuracy: 0.02)
        }
        let expectedOutputs: [[Float32]] = [
            [ 34.1069, -10.8118, -20.9264,   6.9854,  29.8132, -16.4230,  25.8529,  33.6892,  22.4547,   2.5323],
            [-133.0745,   42.1842,   81.6485,  -27.2549, -116.3221,   64.0774, -100.8702, -131.4448,  -87.6113,   -9.8803],
            [ 189.9498,  -60.2134, -116.5446,   38.9035,  166.0374,  -91.4637,  143.9815,  187.6235,  125.0558,   14.1031],
            [-506.2843,  160.4904,  310.6332, -103.6917, -442.5492,  243.7836, -383.7622, -500.0839, -333.3185,  -37.5898],
            [ 506.3781, -160.5201, -310.6907,  103.7109,  442.6312, -243.8288,  383.8333,  500.1765,  333.3802,   37.5967],
            [-950.2616,  301.2297,  583.0377, -194.6223, -830.6351,  457.5654, -720.2960, -938.6239, -625.6164,  -70.5535],
            [ 680.3371, -215.6646, -417.4242,  139.3393,  594.6908, -327.5927,  515.6938,  672.0051,  447.9083,   50.5125],
            [-917.9694,  290.9932,  563.2246, -188.0086, -802.4080,  442.0162, -695.8185, -906.7272, -604.3564,  -68.1559],
            [ 480.4134, -152.2894, -294.7600,   98.3931,  419.9351, -231.3263,  364.1522,  474.5298,  316.2860,   35.6689],
            [-475.7441,  150.8092,  291.8951,  -97.4368, -415.8535,  229.0780, -360.6128, -469.9177, -313.2119,  -35.3223],
            [ 185.7955,  -58.8965, -113.9957,   38.0526,  162.4060,  -89.4633,  140.8325,  183.5200,  122.3207,   13.7946],
            [-137.7888,   43.6786,   84.5410,  -28.2204, -120.4428,   66.3474, -104.4436, -136.1013,  -90.7149,  -10.2303],
            [ 40.9871, -12.9928, -25.1478,   8.3945,  35.8273, -19.7359,  31.0681,  40.4851,  26.9844,   3.0431],
            [-23.2233,   7.3617,  14.2488,  -4.7563, -20.2998,  11.1824, -17.6032, -22.9389, -15.2894,  -1.7242],
            [ 5.3694, -1.7021, -3.2944,  1.0997,  4.6934, -2.5854,  4.0700,  5.3036,  3.5350,  0.3987],
            [-2.3706,  0.7515,  1.4545, -0.4855, -2.0722,  1.1415, -1.7969, -2.3416, -1.5607, -0.1760],
            [ 0.4347, -0.1378, -0.2667,  0.0890,  0.3800, -0.2093,  0.3295,  0.4294,  0.2862,  0.0323],
            [-0.1525,  0.0483,  0.0936, -0.0312, -0.1333,  0.0734, -0.1156, -0.1506, -0.1004, -0.0113],
            [ 0.0226, -0.0072, -0.0139,  0.0046,  0.0198, -0.0109,  0.0171,  0.0223,  0.0149,  0.0017],
            [-0.0064,  0.0020,  0.0039, -0.0013, -0.0056,  0.0031, -0.0049, -0.0064, -0.0042, -0.0005],
            [     0.0008,     -0.0002,     -0.0005,      0.0002,      0.0007,     -0.0004,      0.0006,      0.0008,
                  0.0005,      0.0001],
            [    -0.0002,      0.0001,      0.0001,     -0.0000,     -0.0002,      0.0001,     -0.0001,     -0.0002,
                  -0.0001,     -0.0000],
            [     0.0000,     -0.0000,     -0.0000,      0.0000,      0.0000,     -0.0000,      0.0000,      0.0000,
                  0.0000,      0.0000],
            [    -0.0000,      0.0000,      0.0000,     -0.0000,     -0.0000,      0.0000,     -0.0000,     -0.0000,
                  -0.0000,     -0.0000],
            [     0.0000,     -0.0000,     -0.0000,      0.0000,      0.0000,     -0.0000,      0.0000,      0.0000,
                  0.0000,      0.0000],
            [    -0.0000,      0.0000,      0.0000,     -0.0000,     -0.0000,      0.0000,     -0.0000,     -0.0000,
                  -0.0000,     -0.0000],
            [     0.0000,     -0.0000,     -0.0000,      0.0000,      0.0000,     -0.0000,      0.0000,      0.0000,
                  0.0000,      0.0000],
            [    -0.0000,      0.0000,      0.0000,     -0.0000,     -0.0000,      0.0000,     -0.0000,     -0.0000,
                  -0.0000,     -0.0000],
            [     0.0000,     -0.0000,     -0.0000,      0.0000,      0.0000,     -0.0000,      0.0000,      0.0000,
                  0.0000,      0.0000],
            [    -0.0000,      0.0000,      0.0000,     -0.0000,     -0.0000,      0.0000,     -0.0000,     -0.0000,
                  -0.0000,     -0.0000],
            [     0.0000,     -0.0000,     -0.0000,      0.0000,      0.0000,     -0.0000,      0.0000,      0.0000,
                  0.0000,      0.0000],
            [    -0.0000,      0.0000,      0.0000,     -0.0000,     -0.0000,      0.0000,     -0.0000,     -0.0000,
                  -0.0000,     -0.0000],
            [    -0.0000,      0.0000,      0.0000,     -0.0000,     -0.0000,      0.0000,     -0.0000,     -0.0000,
                  -0.0000,     -0.0000],
            [    -0.0000,      0.0000,      0.0000,     -0.0000,     -0.0000,      0.0000,     -0.0000,     -0.0000,
                  -0.0000,     -0.0000],
            [    -0.0000,      0.0000,      0.0000,     -0.0000,     -0.0000,      0.0000,     -0.0000,     -0.0000,
                  -0.0000,     -0.0000],
            [    -0.0000,      0.0000,      0.0000,     -0.0000,     -0.0000,      0.0000,     -0.0000,     -0.0000,
                  -0.0000,     -0.0000],
            [    -0.0000,      0.0000,      0.0000,     -0.0000,     -0.0000,      0.0000,     -0.0000,     -0.0000,
                  -0.0000,     -0.0000],
            [    -0.0000,      0.0000,      0.0000,     -0.0000,     -0.0000,      0.0000,     -0.0000,     -0.0000,
                  -0.0000,     -0.0000],
            [    -0.0000,      0.0000,      0.0000,     -0.0000,     -0.0000,      0.0000,     -0.0000,     -0.0000,
                  -0.0000,     -0.0000],

        ]
        
        var output = latent
        for (index, t) in scheduler.timeSteps.enumerated() {
            latent = scheduler.scaleModelInput(timeStep: t, sample: latent)
            output = scheduler.step(output: output, timeStep: t, sample: latent, generator: generator)
            
            zip(output[0][0][0][0..<10].scalars, expectedOutputs[index]).forEach { actual, expected in
                XCTAssertEqual(actual, expected, accuracy: 0.02)
            }
        }
    }
    
    func testStepEpsilonKarras() throws {
        let scheduler = KDPM2DiscreteScheduler(stepCount: 20, useKarrasSigmas: true)
        let generator: RandomGenerator = TorchRandomGenerator(seed: 50)
        let stdev = scheduler.initNoiseSigma
        var latent: MLShapedArray<Float32> = generator.nextArray(shape: [1, 4, 64, 64], mean: 0, stdev: stdev)
        zip(latent[0][0][0][0..<10].scalars, [
            -16.9352,   5.3684,  10.3907,  -3.4685, -14.8032,   8.1545, -12.8368, -16.7278, -11.1495,  -1.2574
        ]).forEach { actual, expected in
            XCTAssertEqual(actual, expected, accuracy: 0.02)
        }
        let expectedOutputs: [[Float32]] = [
            [ 24.6550,  -7.8155, -15.1272,   5.0496,  21.5512, -11.8717,  18.6884,  24.3530,  16.2319,   1.8305],
            [-72.3911,  22.9477,  44.4159, -14.8264, -63.2779,  34.8574, -54.8723, -71.5045, -47.6596,  -5.3748],
            [ 91.2279, -28.9189, -55.9733,  18.6843,  79.7434, -43.9276,  69.1506,  90.1107,  60.0610,   6.7733],
            [-217.6007,   68.9787,  133.5100,  -44.5666, -190.2074,  104.7781, -164.9408, -214.9358, -143.2601,  -16.1561],
            [ 225.3727,  -71.4424, -138.2785,   46.1584,  197.0010, -108.5204,  170.8320,  222.6126,  148.3769,   16.7331],
            [-440.9608,  139.7831,  270.5537,  -90.3129, -385.4492,  212.3294, -334.2473, -435.5605, -290.3121,  -32.7397],
            [ 372.8385, -118.1886, -228.7569,   76.3608,  325.9027, -179.5274,  282.6107,  368.2725,  245.4629,   27.6819],
            [-594.3813,  188.4169,  364.6856, -121.7348, -519.5560,  286.2036, -450.5397, -587.1022, -391.3184,  -44.1306],
            [ 407.3621, -129.1324, -249.9390,   83.4315,  356.0801, -196.1510,  308.7795,  402.3732,  268.1919,   30.2451],
            [-525.3247,  166.5262,  322.3156, -107.5914, -459.1927,  252.9518, -398.1949, -518.8912, -345.8541,  -39.0034],
            [ 289.6209,  -91.8089, -177.6984,   59.3171,  253.1612, -139.4569,  219.5320,  286.0740,  190.6756,   21.5033],
            [-299.7833,   95.0303,  183.9336,  -61.3984, -262.0442,  144.3502, -227.2351, -296.1120, -197.3661,  -22.2578],
            [131.8677, -41.8016, -80.9081,  27.0077, 115.2672, -63.4963,  99.9554, 130.2528,  86.8168,   9.7907],
            [-108.6469,   34.4407,   66.6608,  -22.2519,  -94.9695,   52.3151,  -82.3541, -107.3163,  -71.5290,   -8.0666],
            [ 37.7956, -11.9811, -23.1897,   7.7409,  33.0376, -18.1991,  28.6490,  37.3327,  24.8832,   2.8062],
            [-24.5643,   7.7868,  15.0716,  -5.0310, -21.4720,  11.8281, -18.6197, -24.2635, -16.1722,  -1.8238],
            [ 6.6938, -2.1219, -4.1070,  1.3710,  5.8511, -3.2232,  5.0739,  6.6118,  4.4070,  0.4970],
            [-3.3985,  1.0773,  2.0852, -0.6960, -2.9707,  1.6364, -2.5760, -3.3569, -2.2374, -0.2523],
            [ 0.7180, -0.2276, -0.4405,  0.1470,  0.6276, -0.3457,  0.5442,  0.7092,  0.4727,  0.0533],
            [-0.2817,  0.0893,  0.1729, -0.0577, -0.2463,  0.1357, -0.2136, -0.2783, -0.1855, -0.0209],
            [ 0.0456, -0.0145, -0.0280,  0.0093,  0.0399, -0.0220,  0.0346,  0.0451,  0.0300,  0.0034],
            [-0.0137,  0.0043,  0.0084, -0.0028, -0.0120,  0.0066, -0.0104, -0.0135, -0.0090, -0.0010],
            [ 0.0017, -0.0005, -0.0010,  0.0003,  0.0015, -0.0008,  0.0013,  0.0017,  0.0011,  0.0001],
            [    -0.0004,      0.0001,      0.0002,     -0.0001,     -0.0003,      0.0002,     -0.0003,     -0.0004,
                  -0.0002,     -0.0000],
            [     0.0000,     -0.0000,     -0.0000,      0.0000,      0.0000,     -0.0000,      0.0000,      0.0000,
                  0.0000,      0.0000],
            [    -0.0000,      0.0000,      0.0000,     -0.0000,     -0.0000,      0.0000,     -0.0000,     -0.0000,
                  -0.0000,     -0.0000],
            [     0.0000,     -0.0000,     -0.0000,      0.0000,      0.0000,     -0.0000,      0.0000,      0.0000,
                  0.0000,      0.0000],
            [    -0.0000,      0.0000,      0.0000,     -0.0000,     -0.0000,      0.0000,     -0.0000,     -0.0000,
                  -0.0000,     -0.0000],
            [     0.0000,     -0.0000,     -0.0000,      0.0000,      0.0000,     -0.0000,      0.0000,      0.0000,
                  0.0000,      0.0000],
            [    -0.0000,      0.0000,      0.0000,     -0.0000,     -0.0000,      0.0000,     -0.0000,     -0.0000,
                  -0.0000,     -0.0000],
            [     0.0000,     -0.0000,     -0.0000,      0.0000,      0.0000,     -0.0000,      0.0000,      0.0000,
                  0.0000,      0.0000],
            [    -0.0000,      0.0000,      0.0000,     -0.0000,     -0.0000,      0.0000,     -0.0000,     -0.0000,
                  -0.0000,     -0.0000],
            [    -0.0000,      0.0000,      0.0000,     -0.0000,     -0.0000,      0.0000,     -0.0000,     -0.0000,
                  -0.0000,     -0.0000],
            [    -0.0000,      0.0000,      0.0000,     -0.0000,     -0.0000,      0.0000,     -0.0000,     -0.0000,
                  -0.0000,     -0.0000],
            [    -0.0000,      0.0000,      0.0000,     -0.0000,     -0.0000,      0.0000,     -0.0000,     -0.0000,
                  -0.0000,     -0.0000],
            [    -0.0000,      0.0000,      0.0000,     -0.0000,     -0.0000,      0.0000,     -0.0000,     -0.0000,
                  -0.0000,     -0.0000],
            [    -0.0000,      0.0000,      0.0000,     -0.0000,     -0.0000,      0.0000,     -0.0000,     -0.0000,
                  -0.0000,     -0.0000],
            [    -0.0000,      0.0000,      0.0000,     -0.0000,     -0.0000,      0.0000,     -0.0000,     -0.0000,
                  -0.0000,     -0.0000],
            [    -0.0000,      0.0000,      0.0000,     -0.0000,     -0.0000,      0.0000,     -0.0000,     -0.0000,
                  -0.0000,     -0.0000],
        ]
        
        var output = latent
        for (index, t) in scheduler.timeSteps.enumerated() {
            latent = scheduler.scaleModelInput(timeStep: t, sample: latent)
            output = scheduler.step(output: output, timeStep: t, sample: latent, generator: generator)
            
            zip(output[0][0][0][0..<10].scalars, expectedOutputs[index]).forEach { actual, expected in
                XCTAssertEqual(actual, expected, accuracy: 0.02)
            }
        }
    }
}
